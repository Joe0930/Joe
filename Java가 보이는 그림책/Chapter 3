if문: 조건에 따라 처리를 할때 사용하며 조건에는 비교 및 논리 연산자를 이용한 조건식을 지정한다;
다중 조건을 사용할때는 else if를 사용한다;
  if(조건1) {
    처리1;
  }
  else if(조건2) {
    처리2;
  }
  else {
    처리3;
  }
  
for문: 반복 처리를 효율적으로 수행하기 위한 제어문으로 카운터를 준비하여 그 값에 따라 반복 횟수를 결정 한다;
  int i; // 카운터
  for(i = 1; i < 4; i++) // 카운터의 초기값, 반복을 위한 조건, 카운터 증가 방법
2중 루프: 제어문 2개를 사용하여 루프 속에 루프를 집어넣을 수 있다;
  ex) 구구단 출력
    int a, b;
    for(a = 1; a <= 9; a++)
      for(b = 1; b <= 9; b++)
        sout.println(a + "X" + b + "=" + a*b);
*for문은 일반적으로 반복 횟수를 정해서 처리를 수행하지만 배열이나 컬렉션 클래스 등의 요소 수에 따라 처리를 수행할 수 있다;
  int[] a = {1, 2, 3, 4};
  for(int b : a) // b: 요소를 대입하기 위한 변수, a: 배열이나 컬렉션 클래스를 지정
컬렉션 클래스: 배열과 같이 데이터를 복수 격납할 수 있고 요소의 추가/삭제/검색할 수 있다;

while문: 어떠한 조건이 성립하는 동안만 반복 처리를 실행하는 제어문, for문 처럼 카운터가 있지 않다;
do ~ while문: while문과 다르게 조건을 아래쪽에 씀으로 반드시 한 번은 처리를 수행한다;

break: 반복문을 중단하기 위해 사용되며 프로그램 실행중 break문을 발견하면 가장 가까운 블록의 끝으로 점프한다;
continue: 자신이 위치한 루프의 처리를 중단하고 다음 차례의 반복을 처음부터 실행시킨다;

switch문: case라는 선택지에서 식의 값과 일치하는 것을 골라 실행하며, 식의 값이 어떤 case와도 맞이 않을시 default로 넘어간다;
각 case의 마지막에는 break문을 써서 선택한 처리만 수행하도록 한다;
식에 해당하는 부분에는 char, byte, short, int형 변수를 사용할 수 있으며 그 외에는 switch문 대신 if ~ else if ~ else를 이용한다;
